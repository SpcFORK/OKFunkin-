std := import('std')
Once := std.once

str := import('str')
json := import('json')
rng := import('random')


{
  FirstInput?: FirstInput?
  IS_IFRAME: IS_IFRAME
  CHROMEOS: CHROMEOS

  SUPERCOMMONCOLOUR: SUPERCOMMONCOLOUR
  createBeatHandler: createBeatHandler

  getFInput: getFInput
  enterNextH: enterNextH

  playMenuEnter: playMenuEnter
  MEnterTrigger: MEnterTrigger

  currentAudio: currentAudio

  playMenuEnter: playMenuEnter
  stopConfirm: stopConfirm
  MEnterTrigger: MEnterTrigger

  playMenuMusic: playMenuMusic
  stopMenuMusic: stopMenuMusic

  playTickSound: playTickSound
  stopTickSound: stopTickSound

  createPlayer: createPlayer
  createGhosty: createGhosty

  createMenuStructure: createMenuStructure
  ScrollableMenu: ScrollableMenu
  ScrollableList: ScrollableList
} := import('../core')


{
  Transition: Transition
  PixelTransition: PixelTransition
} := import('../../blocks/Transition')


{ newCut: newCut } := import('../../ware/cutscene')
{ shakey: shakey } := import('../../blocks/shakey')


// ---
// @Weekloaders

WeekImport := import('weekLoading/all')

{
  week1: week1
  week2: week2
  week3: week3
  week4: week4
  week5: week5
  week6: week6
  week7: week7
  week8: week8
} := WeekImport

WeekImportKeys := with new(Array, 8).
  fill('week' |> s()).
  map() fn(v, i) v + (i + 1)

// ---
// @Storymode
//   Expect to come here a lot.

StoryWeeks := {
  'Week 1': week1.load
  'Week 2': week2.load
  'Week 3': week3.load
  'Week 4': week4.load
  'Week 5': week5.load
  'Week 6': week6.load
  'Week 7': week7.load
  'Week 8': week8.load
}

WeekNames := StoryWeeks |> keys()

// @Modder  exposed
window.StoryWeeks := {
  get: fn() StoryWeeks
  set: fn(k, x) StoryWeeks.(k) <- x
}

// ---

WeekTexts := {}
with WeekNames.forEach() fn(weekName, i) {
  wkt := WeekImport.(WeekImportKeys.(i)).WeekTexts
  WeekTexts.(weekName) <- if wkt {
    ? -> ['err', 'Whaaaa?']
    _ -> wkt
  }
}

window.WeekTexts := WeekTexts

// ---

with scene('storyMode') fn {

  enterNextH('gameSelect', 'escape')

  // ---

  tabs := createMenuStructure()

  fn setText(topl, topr, infot) {
    fn is(rule, cb) if rule != ? -> cb()

    with is(topl) fn() tabs.top.topLeftText.text <- topl
    with is(topr) fn() tabs.top.topRightText.text <- topr
    with is(infot) fn() tabs.bottom.infoText.text <- infot
  }

  // Yellowish BG
  with add() [
    rect(width(), height())
    color(
      SUPERCOMMONCOLOUR.0
      SUPERCOMMONCOLOUR.1
      SUPERCOMMONCOLOUR.2
    )
    z(-3)
  ]

  setText(
    'Select Week'
    'USE ARROW KEYS TO MOVE TABS'
    '(Press ENTER to select Week)'
  )

  trs := Transition(BLACK)
  trs.fadeOut(0.2)

  // ---

  Weeks := StoryWeeks

  sm := ScrollableMenu(Weeks)

  // ---

  fn changeTexts {
    weekbarText := WeekTexts.(sm.key()) |> std.default([?,?,?])
    setText(?, weekbarText...)
  }

  fn moveLeft {
    with sm.moveForward() fn() playTickSound()
    changeTexts()
  }

  fn moveRight {
    with sm.moveBack() fn() playTickSound()
    changeTexts()
  }

  // ---

  s('left') |> with onKeyPressRepeat() moveLeft
  s('a') |> with onKeyPressRepeat() moveLeft

  s('right') |> with onKeyPressRepeat() moveRight
  s('d') |> with onKeyPressRepeat() moveRight

  // ---

  with sm.EListen() with Once() fn {
    weekCall := sm.getItem()

    Transition(BLACK).fadeIn(0.2)
    with wait(0.2) weekCall
  }
}