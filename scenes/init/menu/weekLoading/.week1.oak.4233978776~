std := import('std')
Once := std.once

str := import('str')
json := import('json')
rng := import('random')


{
  FirstInput?: FirstInput?
  IS_IFRAME: IS_IFRAME
  CHROMEOS: CHROMEOS

  SUPERCOMMONCOLOUR: SUPERCOMMONCOLOUR
  createBeatHandler: createBeatHandler

  getFInput: getFInput
  enterNextH: enterNextH

  playMenuEnter: playMenuEnter
  MEnterTrigger: MEnterTrigger

  currentAudio: currentAudio

  playMenuEnter: playMenuEnter
  stopConfirm: stopConfirm
  MEnterTrigger: MEnterTrigger

  playMenuMusic: playMenuMusic
  stopMenuMusic: stopMenuMusic

  playTickSound: playTickSound
  stopTickSound: stopTickSound

  createPlayer: createPlayer
  createGhosty: createGhosty

  createMenuStructure: createMenuStructure
  ScrollableMenu: ScrollableMenu
  ScrollableList: ScrollableList
} := import('../../core')


{
  Transition: Transition
  PixelTransition: PixelTransition
} := import('../../../blocks/Transition')


{ newCut: newCut } := import('../../../ware/cutscene')
{ shakey: shakey } := import('../../../blocks/shakey')


fn leave!() go('loading', {
  cb: fn() Promise |> with new() fn(r) r()
})


bf := ?


with scene('cutscene_d_1') fn {
  stopMenuMusic()

  setBackground(SUPERCOMMONCOLOUR...)

  bar1 := with add() [
    rect(width(), height() / 4)
    pos(0, 0)
    color(BLACK)
  ]

  bar2 := with add() [
    rect(width(), height() / 4)
    pos(0, height())
    anchor('botleft' |> s())
    color(BLACK)
  ]

  bottomText := with add() [
    text('' |> s(), {
      size: 12 * 1.5
      align: 'center' |> s()
    })
    pos(width() / 2, height() * (3 / 4) + (height() / 4 / 2))
    anchor('center' |> s())
  ]

  bottomText.typeOutText := with do() '
  async function typeOutText(txt, delay = 0.1, strict) {
    if (strict) bottomText.text = ""
    for (let i = 0; i < txt.length; i++) {
      await sleep(delay)
      bottomText.text += txt[i]
    }
    return bottomText.text
  }
  '
  
  bottomText.backspaceText := with do() '
  async function backspaceText(amm = 1, delay = 0.1) {
    for (let i = 0; i < amm; i++) {
      await sleep(delay)
      bottomText.text = bottomText.text.slice(0, -1)
    }
    return bottomText.text
  }
  '

  bf := createPlayer(
    pos(width() / 4, height() / 2)
    rotate(0)
  )

  wait(5, d1continueSegment)

  // Do Cutscene
  cutsc := newCut()
  [
    // In
    [0.05, fn() console.log(1)]
    [0.05, fn() console.log(2)]
    [0.05, fn() console.log(3)]
  ] |> with cutsc.Cutscene() fn {}
}

fn d1continueSegment() {

}

fn load {
  // We also do loading during them because thats cool downtime!
  go('cutscene_d_1')
}