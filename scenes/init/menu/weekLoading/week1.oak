std := import('std')
Once := std.once

str := import('str')
json := import('json')
rng := import('random')

{
  FirstInput?: FirstInput?
  IS_IFRAME: IS_IFRAME
  CHROMEOS: CHROMEOS

  SUPERCOMMONCOLOUR: SUPERCOMMONCOLOUR
  createBeatHandler: createBeatHandler

  getFInput: getFInput
  enterNextH: enterNextH

  playMenuEnter: playMenuEnter
  MEnterTrigger: MEnterTrigger

  currentAudio: currentAudio

  playMenuEnter: playMenuEnter
  stopConfirm: stopConfirm
  MEnterTrigger: MEnterTrigger

  playMenuMusic: playMenuMusic
  stopMenuMusic: stopMenuMusic

  playTickSound: playTickSound
  stopTickSound: stopTickSound

  createPlayer: createPlayer
  createGhosty: createGhosty

  createMenuStructure: createMenuStructure
  ScrollableMenu: ScrollableMenu
  ScrollableList: ScrollableList
} := import('../../core')


{
  Transition: Transition
  PixelTransition: PixelTransition
} := import('../../../blocks/Transition')


{ newCut: newCut } := import('../../../ware/cutscene')
{ shakey: shakey } := import('../../../blocks/shakey')


fn leave!() go('loading', {
  cb: fn() Promise |> with new() fn(r) r()
})


WeekTexts := [
  'Daddy Dearest'
  'A unique storyline, Kaboom themed'
]

enteredBefore := 0
fn load {
  // We also do loading during them because thats cool downtime!
  if enteredBefore = 0 {
    true -> go('cutscene_d_1')
    false -> leave!()
  }

  enteredBefore <- enteredBefore + 1
}

with scene('cutscene_d_1') fn {
  stopMenuMusic()
  setBackground(SUPERCOMMONCOLOUR...)

  with onKeyPress('enter' |> s()) leave!

  // --

  bar1 := with add() [
    rect(width(), height() / 4)
    pos(0, 0)
    color(BLACK)
  ]

  bar2 := with add() [
    rect(width(), height() / 4)
    pos(0, height())
    anchor('botleft' |> s())
    color(BLACK)
  ]

  bottomText := with add() [
    text(s(''), {
      size: 12 * 1.2
      align: 'center' |> s()
      font: 'sink' |> s()
    })
    pos(width() / 2, height() * (3 / 4) + (height() / 4 / 2))
    anchor('center' |> s())
  ]

  bottomText.typeOutText := fn(text, strict) {
    if strict -> bottomText.text = ''
    ttrack := 0
    fn tr(n, cb) with wait(ttrack <- ttrack + n) cb
    std.range(text |> s() |> len()) |> with std.each() fn(ii, b) {
      console.log(s(text).(ii), b)
      with tr(0.02) fn() bottomText.text <- (bottomText.text << s(text).(ii))
    }
  }

  fn clear!() bottomText.text <- s('')

  bf := createPlayer(
    pos(width() / 4, height() / 2)
  )

  bf.use(rotate(0))

  ts := Transition(color(WHITE))
  ts.fadeOut(?, 5)

  atrack := 0
  fn tr(n, cb) if bottomText != undefined -> with wait(atrack <- atrack + n) cb

  with tr(2) fn() bottomText.typeOutText(
    'Beanfriend wants to date Ghostine, \n' <<
    'but her ghouls do not welcome him.', 50, true
  )
  
  with tr(5) clear!
  
  with tr(2) fn() bottomText.typeOutText(
    'After some warm-up training with Ghostine, \n' << 
    'Beanfriend has a sing-off with ...', 50, true
  )
  
  with tr(5) clear!
  
  with tr(2) fn() bottomText.typeOutText(
    'Beanfriend, your time is now !!!', 50, true
  )

  with tr(1) fn() {
    burp()
  
    speed := 1
    rotUpd := with new(Promise) fn(res, rej) {
      fn handleUpdate() {
        val := speed <- (speed + (speed / 100))
        bf.rotateBy(5 * val)
        bf.move(speed / 10, 0)
      }
      with bf.onUpdate() fn {
        if speed < 4000 {
          true -> handleUpdate()
          _ -> res(?)
        }
      }
    }
    
    with rotUpd.then() fn {
      bf.rotateTo(0)
      ts.fadeIn(2)
      with wait(3) fn() leave!()
    }
  }
  
}