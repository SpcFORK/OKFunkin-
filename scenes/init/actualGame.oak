std := import('std')
fmt := import('fmt')
math := import('math')

{
  FirstInput?: FirstInput?
  IS_IFRAME: IS_IFRAME
  CHROMEOS: CHROMEOS

  SUPERCOMMONCOLOUR: SUPERCOMMONCOLOUR
  createBeatHandler: createBeatHandler

  getFInput: getFInput
  enterNextH: enterNextH

  playMenuEnter: playMenuEnter
  MEnterTrigger: MEnterTrigger

  currentAudio: currentAudio

  playMenuEnter: playMenuEnter
  stopConfirm: stopConfirm
  MEnterTrigger: MEnterTrigger

  playMenuMusic: playMenuMusic
  stopMenuMusic: stopMenuMusic

  playTickSound: playTickSound
  stopTickSound: stopTickSound

  createPlayer: createPlayer
  createGhosty: createGhosty

  createMenuStructure: createMenuStructure
  ScrollableMenu: ScrollableMenu
  ScrollableList: ScrollableList
} := import('core')


{
  Transition: Transition
  PixelTransition: PixelTransition
} := import('../blocks/Transition')

GameParts := import('./gameParts/all')

{ makeParallax: makeParallax } := GameParts.parallax

mf_outline := rgb(31, 16, 42)

// ----

binds := [
  'g'
  'h'
  'l'
  ';'
]

with scene('songGame') fn(save, coreStuff) {
  w! := width()
  h! := width()
  hw! := w! / 2
  hh! := h! / 2

  baseParallax := with makeParallax(?, 1, 1) [
    pos(center())
  ]

  // Actual game is oddly spaced so you don't have to look far
  barHeight := -hh! + 90
  p1 := GameParts.arrows.addArrowBar(baseParallax, 60 - hw!, barHeight, 1)
  p2 := GameParts.arrows.addArrowBar(baseParallax, hw! - 30, barHeight, -1, anchor('topleft' |> s()))

  fn sideState {{
    stp: true
    clr: true
    score: 0
    misses: 0
    acc: 0
    combo: 0
    combo_max: 0
    numOfNotes: 0
    health: 100
  }}

  // ---

  bf := createPlayer()
  bf.pos.x <- 130
  bf.pos.y <- center().y + 100

  speaker := add([
    'speaker' |> s()

    sprite('speaker' |> s())
    anchor('center' |> s())

    pos(center().x, center().y - 30)
    scale(2.1)
  ])

  gf := createGhosty()
  gf.pos.y <- center().x
  gf.pos.y <- center().y + 90

  // ---

  bpm := 60
  fn speedv() bpm / 60 / dt()
  fn hspeedv() bpm / 2 / 60 / dt()

  bh! := createBeatHandler()
  hbh! := createBeatHandler()
  qbh! := createBeatHandler()

  fn doBeat(bk) if bk {
    1 -> {
      baseParallax.tweenBounce(1.5, 0.2)
      bf.play('idle1' |> s())
    }

    2 -> {
      gf.play('idle' |> s())
      speaker.play('beat' |> s())
    }
  }

  with onUpdate() fn if bh!.activateBeat(bpm) = true -> doBeat(1)
  with onUpdate() fn if hbh!.activateBeat(bpm * 2) = true -> doBeat(2)

  p1.bcont := sideState()
  p2.bcont := sideState()
  [lf, rt] := [p1.bcont, p2.bcont]

  scoreText := with baseParallax.add() [
    pos(0, hh! * 0.75)
    anchor('center' |> s())
    outline(200, mf_outline)

    // fns
    scoreCore := {
      scoreFmt: scoreFmt := (
        '{{ 0 }} Points  ' <<
        '{{ 1 }} Misses  ' <<
        '{{ 2 }}% Accuracy'
      )

      formScore: fn formScore(s, m, a) scoreFmt |> fmt.format(s, m, a)

      makeScoreText: fn makeScoreText(side) formScore(
        side.bcont.score
        side.bcont.misses
        side.bcont.acc
      )

      updateScore: fn(side) scoreText.text <- makeScoreText(side)
    }

    with text(formScore(0, 0, 0) |> s()) {
      size: 15
      font: 'arial' |> s()
    }
  ]

  fn makeBinds(a, i) {
    key := binds.(i) |> s()
    key |> onKeyPress(fn {
      a.press()
    })
    key |> onKeyRelease(fn {
      a.unpress()
    })
  }

  fn initBar!(a, b, i) {
    makeBinds(a, i)

    fn transformText(idx, ch) {{
      pos: vec2(0, wave(-4, 4, time() * 4 + idx * 1.5))
      angle: wave(-9, 9, time() * 3 + idx)
    }}

    fn makeComboArea with baseParallax.add() [
      with text(b.bcont.combo |> s()) {
        size: 24
        transform: transformText
      }
      pos(0)
      anchor('center' |> s())
      opacity(1)
      outline(200, mf_outline)
    ]

    fn makeRatingArea with baseParallax.add() [
      // TODO
      // sprite
      with text('...' |> s()) {
        size: 30
        transform: transformText
      }
      pos(0)
      anchor('center' |> s())
      opacity(1)
    ]

    fn doComboDisplay(o, my, ly) {
      SPEED := 3

      upTween := tween(
        o.pos
        vec2(0, my) |> o.pos.add()
        SPEED
        fn(v) o.pos <- v
        easings.easeOutQuad
      )

      downTween := with upTween.then() fn() tween(
        o.pos
        vec2(0, ly) |> o.pos.add()
        SPEED
        fn(v) o.pos <- v
        easings.easeInQuad
      )

      fadeTween := with upTween.then() fn() tween(
        o.opacity
        0
        SPEED
        fn(v) o.opacity <- v
        easings.easeOutSine
      )

      with wait(SPEED * 2) fn {
        o.destroy()
      }
    }

    // Ratings
    //
    // Dst is in Vec2 units
    //
    // 0         0px
    // Nowhere   0.2px
    // Emperor   0.5px
    // King      1px
    // Godly     5px
    // Perfect   10px
    // Wow       15px
    // Sick      20px
    // Cool      40px
    // Great     80px
    // Okay      160px
    // Bad       320px
    // Shit      more
    //
    fn handleRatings(note, dst) if {
      fn addNoteRating(r) note.Rating? <- r
      dst <= 0 -> debug.log(-3)
      dst <= 0.2 -> debug.log(-2)
      dst <= 0.5 -> debug.log(-1)
      dst <= 1 -> debug.log(0)
      dst <= 5 -> debug.log(1)
      dst <= 10 -> debug.log(2)
      dst <= 15 -> debug.log(3)
      dst <= 20 -> debug.log(4)
      dst <= 40 -> debug.log(5)
      dst <= 80 -> debug.log(6)
      dst <= 160 -> debug.log(7)
      dst <= 320 -> debug.log(8)
      _ -> debug.log(9)
    }

    fn handleAcc(note, dst) {
      mh := a.height / 2
      mult := Math.abs(mh - dst) + 1

      hitPoints := (b.bcont.numOfNotes - b.bcont.misses) * 100
      totalPossible := b.bcont.numOfNotes * 100
      distanceMultiplier := math.max(1, 1 - (dst / 100))

      b.bcont.score <- b.bcont.score + math.round(100 * mult)
      b.bcont.numOfNotes <- b.bcont.numOfNotes + 1

      acc! := if b.bcont.score > 0 {
        ?, false -> 0
        _ -> (hitPoints / totalPossible) * 100 * distanceMultiplier
      }

      b.bcont.acc <- math.round(acc!)
      debug.log(acc!)

      scoreText.updateScore(b)
    }

    fn handleNoteClickDist(note) {
      dst := note.pos.dist(0, a.pos.y)
      handleRatings(note, dst)
      handleAcc(note, dst)
    }

    fn handleComboAdd(note) {
      b.bcont.combo <- b.bcont.combo + 1
    }

    fn handleComboDisplay(note) if b.bcont.combo {
      ?, 0 -> {}
      _ -> doComboDisplay(makeComboArea(), -60, 90)
    }

    fn handleCombo(note) {
      handleComboAdd(note)
      handleComboDisplay(note)
    }

    fn clickNote(note) {
      note.numOfNotes <- note.numOfNotes + 1

      handleNoteClickDist(note)
      handleCombo(note)

      note.Pressed? <- true
      note.Missed? <- false
      note.destroy()
    }

    with a.clickEvents.push() fn(note) {
      t := time()

      notMissed := ! note.Missed?
      correctID := note.macroIndex = a.macroIndex
      notTooQuick := (t - a.STATE_CHANGE_TIME) < 0.1

      // Handle Click rule
      if (! a.NEEDS_MACRO_INDEX) |
        (notTooQuick & correctID & notMissed) -> clickNote(note)
    }

    fn handleMiss(note) {
      b.bcont.misses <- b.bcont.misses + 1
      b.bcont.score <- math.max(b.bcont.score - 300, 0)

      note.Missed? <- true
      note.Pressed? <- false
      note.destroy()

      scoreText.updateScore(b)
    }

    with a.leaveEvents.push() fn(note) {
      if (! note.Pressed?) & (! note.Missed?) -> handleMiss(note)
    }

    a.TRACK_ON <- true
  }

  fn begin! {

    fn embedInit(p) fn(a, i) initBar!(a, p, i)
    p1.withAllArrows(embedInit(p1))
    p2.withAllArrows(embedInit(p1))

    fn stepFlag(cb, f) if f -> cb()
    fn stepStep(p) fn() p.stepArrows(-speedv())

    fn stepArrows(p, f) stepStep(p) |> stepFlag(f.stp)
    fn stepColors(p, f) p.stepColors |> stepFlag(f.clr)

    sides := [
      [p1, lf]
      [p2, rt]
    ]

    cbs := [
      stepArrows
      stepColors
    ]

    with onUpdate() fn with sides.forEach() fn(e) {
      with cbs.forEach() fn(cb) cb(e...)
    }
  }

  centerText := with baseParallax.add() [
    with text('0' |> s()) {
      size: 30
    }
    pos(0)
    anchor('center' |> s())
  ]

  fn doStartSeq(v, cb) {
    centerText.text <- s(v)

    fn handleFalse {
      cb()
      centerText.destroy()
    }

    fn handleTrue with wait(1) fn() doStartSeq(v - 1, cb)

    if v > 0 {
      true -> handleTrue()
      false -> handleFalse()
    }
  }

  // Load chart
  console.log()

  p1.trackNote!(1, 300)
  p1.trackNote!(2, 600)
  p1.trackNote!(0, 600)
  p1.trackNote!(3, 1700)

  doStartSeq(3, begin!)

}