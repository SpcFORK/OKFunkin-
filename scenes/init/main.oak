// @SPCFORK BOOT

std := import('std')
Once := std.once

str := import('str')
json := import('json')
rng := import('random')

_b := import('boot')

// ---

// KSink

ksink := loadFont(
  s('sink')
  s('/fonts/sink/font.ttf')
)

GLOBAL_LOADED_FILES := window.GLOBAL_LOADED_FILES := {
  txts: ''
  RIGHTTOPTEXTCHOICES: {}
  WEEKLIST: {}
  WEEKSONGS: {}
  STORYW: {}
}

// ---

// W GLOBALS
// Check if we can play Sounds
{
  FirstInput?: FirstInput?
  IS_IFRAME: IS_IFRAME
  CHROMEOS: CHROMEOS
  
  SUPERCOMMONCOLOUR: SUPERCOMMONCOLOUR
  createBeatHandler: createBeatHandler

  getFInput: getFInput
  enterNextH: enterNextH

  playMenuEnter: playMenuEnter
  MEnterTrigger: MEnterTrigger

  currentAudio: currentAudio
  
  playMenuEnter: playMenuEnter
  stopConfirm: stopConfirm
  MEnterTrigger: MEnterTrigger
  
  playMenuMusic: playMenuMusic
  stopMenuMusic: stopMenuMusic

  playTickSound: playTickSound
  stopTickSound: stopTickSound

  createPlayer: createPlayer
  createGhosty: createGhosty

  createMenuStructure: createMenuStructure
  ScrollableMenu: ScrollableMenu
  ScrollableList: ScrollableList
} := import('core')

// ---

{
  Transition: Transition
  PixelTransition: PixelTransition
} := import('../blocks/Transition')

{ newCut: newCut } := import('../ware/cutscene')
{ shakey: shakey } := import('../blocks/shakey')

// ---

// @Preload

PRELOAD := import('menu/preload')

{
  gwibble: gwibble
  beanSpr: beanSpr
  ghostySpr: ghostySpr
  menu_logoSpr: menu_logoSpr
  loadBarSpr: loadBarSpr
  loading_tempSpr: loading_tempSpr
  kaboomSpr: kaboomSpr
  kaboom_bgSpr: kaboom_bgSpr
  cowingSpr: cowingSpr
  introTexts: introTexts

  menuMusic: menuMusic
} := PRELOAD

// ---

with scene('inputCheck') fn(data) {
  if data.next != ? -> {

    if FirstInput? {
      false -> getFInput(data.next)
      true -> data.next()
    }
    
  }

  // ---

  txt := with do() '
    add([
      text(
        "Please press anywhere on the canvas.",
        {
          size: 18,
          width: width() * 0.75,
          font: "sink",
          align: "center"
        }
      ),
      pos(center()),
      anchor("center")
    ])
  '
}

// ---

with scene('intro') fn {

  playMenuMusic()

  setBackground(BLACK)

  firstTrack := newCut()
  
  // ---

  enterNextH('menuScreen')
  enterNextH('intro', 'escape')

  // ---
  
  txt := with do() '
    add([
      text(
        "KaboomFunkin\\\'",
        {
          size: 42,
          width: width() * 0.75,
          font: "gwibble",
          align: "center"
        }
      ),
      pos(center()),
      anchor("center")
    ])
  '

  cowingLogo := with add() [
    with sprite() 'cowing' |> s()
    pos(center())
    with anchor() 'center' |> s()
    scale(0.1)
  ]

  // @semi-components
  with shakey() txt
  with shakey() cowingLogo

  // ---

  cutArr := [

    // Initally Hidden
    [0, [txt, 0]]
    [0, [cowingLogo, 0]]
    
    [2, [txt, 1]]
    [3.2, [txt, 0]]

    [2, fn {
      txt.text <- 'Made by Spectcow\n'
    }]
    [0, [txt, 1]]
    
    [3, fn {
      txt.text <- txt.text + 'He\'s so cool !'
    }]
    
    [3.2, [txt, 0]]

    // @ Intro Random Text
    [2, fn {
      choice := introTexts |> str.split('\n') |> rng.choice()
      txt.text <- ''

      choice |> str.split('--') |> with std.each() fn(ii, ic) {
        with wait(1.2 * ic) fn() txt.text <- txt.text + ii << '\n'
      }
    }]
    [0, [txt, 1]]
    
    [4, [txt, 0]]

    [2, fn() Transition(WHITE).fadeIn(2)]
    // 2 + fadeTime
    [3 + 2, fn() go('menuScreen')]
  ]

  with firstTrack.Cutscene(cutArr) fn(ii) if type(ii) {
    :function -> ii()
    _ -> {
      (ii.0).opacity <- ii.1 |> std.default((ii.0).opacity)
    }
  }
}

// ---

with scene('menuScreen') fn {

  enterNextH('gameSelect')
  with enterNextH('intro', 'escape') fn {
    stopMenuMusic()
  }

  // ---

  MEnterTrigger()
  
  // ---

  bpmh := createBeatHandler()

  menu_logo := with add() [
    with sprite() s('menu_logo')
    pos(center())
    with anchor() s('center')
    scale(0.5)
  ]

  kaboomBG := with add() [
    with sprite() s('kaboom_bg')
    pos(menu_logo.pos.x + 125, menu_logo.pos.y + 75)
    with anchor() s('center')
    scale(0.5)
  ]

  kaboomText := with add() [
    with sprite() s('kaboom')
    pos(kaboomBG.pos)
    with anchor() s('center')
    scale(0.5)
  ]

  text_ := with add() [
    text('Press Enter to Start!' |> s(), {
      size: 16
      font: s('sink')
      align: 'center' |> s()
    })
    
    pos(menu_logo.pos.x, menu_logo.pos.y + 200)
    with anchor() s('center')
  ]

  // ---

  scl := 0.5
  udc := with onUpdate() fn {
  
    if bpmh.activateBeat(100) { 
      true -> {
        menu_logo.use(
          scale(scl <- 0.4)
        )
      }
      
      false -> {
        scl <- scl + 0.001
        menu_logo.use(
          scale(scl)
        )
      }
    }
    
  }
  
}

with scene('options') fn {

  enterNextH('gameSelect', 'escape')

  // ---

  songs := {
    'Graphics': fn() go('op_graphics')
    'Audio': fn() go('op_audio')
    'Keybinds': fn() go('op_kb')
    'Adv. Opts': fn() go('op_adv')
    'Leave': fn() go('gameSelect')
  }

  // ---

  songKeys := keys(songs)

  sl := ScrollableList(songs, ?, ?, 50)

  fn moveUp {
    with sl.moveForward() fn() playTickSound()
  }

  fn moveDown {
    with sl.moveBack() fn() playTickSound()
  }

  // ---

  s('up') |> with onKeyPressRepeat() moveUp
  s('w') |> with onKeyPressRepeat() moveUp

  s('down') |> with onKeyPressRepeat() moveDown
  s('s') |> with onKeyPressRepeat() moveDown

  // ---

  with sl.EListen() with std.once() fn {
    songCall := sl.getItem()
    songCall()
  }
}

with scene('op_graphics') fn {

  enterNextH('options', 'escape')

  // ---

  options := {
    'Gamma': fn() go('op_graphics_gamma')
    'Zoom': fn() go('op_graphics_zoom')
    'No Shaders': fn() go('op_graphics_shaders')
    'Leave': fn() go('options')
  }

  // ---

  optionKeys := keys(options)

  sl := ScrollableList(options, ?, ?, 50)

  fn moveUp {
    with sl.moveForward() fn() playTickSound()
  }

  fn moveDown {
    with sl.moveBack() fn() playTickSound()
  }

  // ---

  s('up') |> with onKeyPressRepeat() moveUp
  s('w') |> with onKeyPressRepeat() moveUp

  s('down') |> with onKeyPressRepeat() moveDown
  s('s') |> with onKeyPressRepeat() moveDown

  // ---

  with sl.EListen() with std.once() fn {
    optionCall := sl.getItem()
    optionCall()
  }
}

with scene('op_audio') fn {

  enterNextH('options', 'escape')

  // ---

  options := {
    'All': fn() go('op_audio_all')
    'Music': fn() go('op_audio_msc')
    'Vocals': fn() go('op_audio_vcl')
    'Sounds': fn() go('op_audio_snd')
    'Leave': fn() go('options')
  }

  // ---

  optionKeys := keys(options)

  sl := ScrollableList(options, ?, ?, 50)

  fn moveUp {
    with sl.moveForward() fn() playTickSound()
  }

  fn moveDown {
    with sl.moveBack() fn() playTickSound()
  }

  // ---

  s('up') |> with onKeyPressRepeat() moveUp
  s('w') |> with onKeyPressRepeat() moveUp

  s('down') |> with onKeyPressRepeat() moveDown
  s('s') |> with onKeyPressRepeat() moveDown

  // ---

  with sl.EListen() with std.once() fn {
    optionCall := sl.getItem()
    optionCall()
  }
}

with scene('op_kb') fn {

  enterNextH('options', 'escape')

  // ---

  options := {
    'Game': fn() go('op_kb_g')
    'Menu': fn() go('op_kb_m')
    'Mods': fn() go('op_kb_c')
    'Leave': fn() go('options')
  }

  // ---

  optionKeys := keys(options)

  sl := ScrollableList(options, ?, ?, 50)

  fn moveUp {
    with sl.moveForward() fn() playTickSound()
  }

  fn moveDown {
    with sl.moveBack() fn() playTickSound()
  }

  // ---

  s('up') |> with onKeyPressRepeat() moveUp
  s('w') |> with onKeyPressRepeat() moveUp

  s('down') |> with onKeyPressRepeat() moveDown
  s('s') |> with onKeyPressRepeat() moveDown

  // ---

  with sl.EListen() with std.once() fn {
    optionCall := sl.getItem()
    optionCall()
  }
}

with scene('op_adv') fn {

  enterNextH('options', 'escape')

  // ---

  options := {
    'Leave': fn() go('options')
  }

  // ---

  optionKeys := keys(options)

  sl := ScrollableList(options, ?, ?, 50)

  fn moveUp {
    with sl.moveForward() fn() playTickSound()
  }

  fn moveDown {
    with sl.moveBack() fn() playTickSound()
  }

  // ---

  s('up') |> with onKeyPressRepeat() moveUp
  s('w') |> with onKeyPressRepeat() moveUp

  s('down') |> with onKeyPressRepeat() moveDown
  s('s') |> with onKeyPressRepeat() moveDown

  // ---

  with sl.EListen() with std.once() fn {
    optionCall := sl.getItem()
    optionCall()
  }
}

with scene('credits') fn {

  enterNextH('gameSelect', 'escape')

  // ---

  creditStr := 
    'SpectCOW (SpcFORK), Creator of KaboomFunkin.\n' <<
    'Thanks for playing!'

  with add() [
    text(creditStr, {
      size: 12 * 1.5
      align: s('center')
    })

    with pos() center()
    with anchor() s('center')
  ]

}

// ---

with scene('gameSelect') fn {

  enterNextH('menuScreen', 'escape')

  // ---

  tabs := createMenuStructure()

  fn setText(topl, topr, infot) {
    fn is(rule, cb) if rule != ? -> cb()

    with is(topl) fn() tabs.top.topLeftText.text <- topl
    with is(topr) fn() tabs.top.topRightText.text <- topr
    with is(infot) fn() tabs.bottom.infoText.text <- infot
  }

  // Yellowish BG
  with add() [
    rect(width(), height())
    color(
      SUPERCOMMONCOLOUR.0
      SUPERCOMMONCOLOUR.1
      SUPERCOMMONCOLOUR.2
    )
    z(-3)
  ]

  setText(
    'Select Tab'
    'USE ARROW KEYS TO MOVE TABS'
    '(Press ENTER to select tab)'
  )

  // ---

  bf := createPlayer()
  gf := createGhosty()

  with bf.use() pos(100, center().y - 75)
  with gf.use() pos(center().x, center().y - 75)

  // ---

  weeks := {
    'Story Mode': fn() go('storyMode')
    'Freeplay': fn() go('freeplay')
    'Options': fn() go('options')
    'Credits': fn() go('credits')
    'Quit': fn() console.log('quit')
  }

  weekKeys := keys(weeks)

  sm := ScrollableMenu(weeks)

  // ---

  fn changeTexts if sm.key() {
    weekKeys.0 -> setText(
      ?
      'Play as Bean!'
      'A unique storyline, Kaboom themed'
    )

    weekKeys.1 -> setText(
      ?
      'Play any SONG!'
      'Your old friend, Freeplay.'
    )

    weekKeys.2 -> setText(
      ?
      'Play with your settings'
      'Change how your game works'
    )

    weekKeys.3 -> setText(
      ?
      'See who did what'
      'The credits, thank the ones in it!'
    )

    weekKeys.4 -> setText(
      ?
      'Quit'
      'Quit the game, boooring.'
    )
  }

  fn moveLeft {
    with sm.moveForward() fn() playTickSound()
    changeTexts()
  }

  fn moveRight {
    with sm.moveBack() fn() playTickSound()
    changeTexts()
  }

  // ---

  s('left') |> with onKeyPressRepeat() moveLeft
  s('a') |> with onKeyPressRepeat() moveLeft

  s('right') |> with onKeyPressRepeat() moveRight
  s('d') |> with onKeyPressRepeat() moveRight

  // ---

  with sm.EListen() with std.once() fn {
    weekCall := sm.getItem()

    Transition(BLACK).fadeIn(0.2)
    with wait(0.2) weekCall
  }

}

// ---

with scene('storyMode') fn {

  enterNextH('gameSelect', 'escape')

  // ---

  tabs := createMenuStructure()

  fn setText(topl, topr, infot) {
    fn is(rule, cb) if rule != ? -> cb()

    with is(topl) fn() tabs.top.topLeftText.text <- topl
    with is(topr) fn() tabs.top.topRightText.text <- topr
    with is(infot) fn() tabs.bottom.infoText.text <- infot
  }

  // Yellowish BG
  with add() [
    rect(width(), height())
    color(
      SUPERCOMMONCOLOUR.0
      SUPERCOMMONCOLOUR.1
      SUPERCOMMONCOLOUR.2
    )
    z(-3)
  ]

  setText(
    'Select Week'
    'USE ARROW KEYS TO MOVE TABS'
    '(Press ENTER to select Week)'
  )

  trs := Transition(BLACK)
  trs.fadeOut(0.2)

  // ---

  weeks := {
    'Week 1': fn() console.log('week')
    'Week 2': fn() console.log('week')
    'Week 3': fn() console.log('week')
    'Week 4': fn() console.log('week')
    'Week 5': fn() console.log('week')
    'Week 6': fn() console.log('week')
    'Week 7': fn() console.log('week')
  }

  weekKeys := keys(weeks)

  sm := ScrollableMenu(weeks)

  // ---

  fn changeTexts if sm.key() {
    weekKeys.0 -> setText(
      ?
      'Daddy Dearest'
      'A unique storyline, Kaboom themed'
    )

    weekKeys.1 -> setText(
      ?
      'The Spookies'
      'Your old friend, Freeplay.'
    )

    weekKeys.2 -> setText(
      ?
      'Pico'
      'Change how your game works'
    )

    weekKeys.3 -> setText(
      ?
      'Mommy Mearest'
      'The credits, thank the ones in it!'
    )

    weekKeys.4 -> setText(
      ?
      'Christmas'
      'Quit the game, boooring.'
    )

    weekKeys.5 -> setText(
      ?
      'Senpai'
      'Quit the game, boooring.'
    )

    weekKeys.6 -> setText(
      ?
      'Tankman'
      'Quit the game, boooring.'
    )
  }

  fn moveLeft {
    with sm.moveForward() fn() playTickSound()
    changeTexts()
  }

  fn moveRight {
    with sm.moveBack() fn() playTickSound()
    changeTexts()
  }

  // ---

  s('left') |> with onKeyPressRepeat() moveLeft
  s('a') |> with onKeyPressRepeat() moveLeft

  s('right') |> with onKeyPressRepeat() moveRight
  s('d') |> with onKeyPressRepeat() moveRight

  // ---

  with sm.EListen() with std.once() fn {
    weekCall := sm.getItem()

    Transition(BLACK).fadeIn(0.2)
    with wait(0.2) weekCall
  }
}

with scene('freeplay') fn {

  enterNextH('gameSelect', 'escape')

  // ---

  songs := {
    'Song': fn() go('storyMode')
    'Song2': fn() go('freeplay')
    'Song3': fn() go('options')
  }

  // ---

  songKeys := keys(songs)

  sl := ScrollableList(songs, ?, ?, 50)

  fn moveUp {
    with sl.moveForward() fn() playTickSound()
  }

  fn moveDown {
    with sl.moveBack() fn() playTickSound()
  }

  // ---

  s('up') |> with onKeyPressRepeat() moveUp
  s('w') |> with onKeyPressRepeat() moveUp

  s('down') |> with onKeyPressRepeat() moveDown
  s('s') |> with onKeyPressRepeat() moveDown

  // ---

  with sl.EListen() with std.once() fn {
    songCall := sl.getItem()
    songCall()
  }
}

// ---

FLAGS? := {
  init?: false
}

with scene('game') fn {
  if ! FLAGS?.init? {
    true -> {
      FLAGS?.init? <- true
  
      go('initLoading')
    }

    false -> go('intro')
  }
}