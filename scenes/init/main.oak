// @SPCFORK BOOT

std := import('std')
Once := std.once

str := import('str')
json := import('json')
rng := import('random')

_b := import('boot')

// ---

// KSink

ksink := loadFont(
  s('sink')
  s('/fonts/sink/font.ttf')
)

// ---

// W GLOBALS

// Check if we can play Sounds
FirstInput? := false
IS_IFRAME := (window.location != window.parent.location)
CHROMEOS := navigator.userAgent.includes('CrOS')

SUPERCOMMONCOLOUR := [248, 206, 86]

// ---

fn getFInput(cb) {
  holder := with onClick() fn {
    FirstInput? <- true
    holder.cancel()
    
    if cb != ? -> cb()
  }
}
fi_ := getFInput()

// ---

fn enterNextH(sce, key?) {
  key? <- key? |> std.default('enter')

  switched? := false

  nextPress := with onKeyPress(key? |> s()) with std.once() fn {
    if !switched? -> {
      nextPress.cancel()
      
      Transition(BLACK).fadeIn(0.2)
      with wait(0.2) fn() go(sce)
    }
  }

  {{
    allow: fn() switched? <- false
    deny: fn() switched? <- true
  }}
}

fn playMenuEnter {
  s('confirmMenu') |> play({
    volume: 0.5
  })
}

fn MEnterTrigger {
  // @ Sounds
  DONE_ENTER_SOUND := false
  with onKeyPress('enter' |> s()) fn if !DONE_ENTER_SOUND -> {
    DONE_ENTER_SOUND := true

    playMenuEnter()
  }
}

// ---

GLOBAL_LOADED_FILES := window.GLOBAL_LOADED_FILES := {
  txts: ''
  RIGHTTOPTEXTCHOICES: {}
  WEEKLIST: {}
  WEEKSONGS: {}
  STORYW: {}
}

// ---

{
  Transition: Transition
  PixelTransition: PixelTransition
} := import('../blocks/Transition')

{ newCut: newCut } := import('../ware/cutscene')
{ shakey: shakey } := import('../blocks/shakey')

// ---

// @Preload

gwibble := ?
beanSpr := ?
ghostySpr := ?
menu_logoSpr := ?
loadBarSpr := ?
loading_tempSpr := ?
kaboomSpr := ?
kaboom_bgSpr := ?
cowingSpr := ?
introTexts := ?

menuMusic := ?

// ---

currentAudio := {
  freakyMenu: ?
  scrollMenu: ?
}

// ---

fn playMenuMusic {
  currentAudio.freakyMenu <- play(
    'freakyMenu' |> s()
    {
      volume: 0.5,
      loop: true,
    }
  )
}

fn stopMenuMusic() if currentAudio.freakyMenu != ? -> {
  currentAudio.freakyMenu.stop()
}

fn playTickSound {
  currentAudio.scrollMenu <-  play(
    s('scrollMenu')
    {
      volume: 0.5
    }
  )
}

fn stopTickSound() if currentAudio.scrollMenu != ? -> {
  currentAudio.scrollMenu.stop()
}

// ---

fn createPlayer() {
  with add() [
    sprite(s('bean'), {
      anim: 'idle' |> s()
    })
    pos(center())
    area()
    body()
    with anchor() 'center' |> s()
    {
      score: 0
      misses: 0
      combo: 0
      combo_max: 0
      health: 100
    }
  ]
}

fn createGhosty() {
  with add() [
    sprite(
      s('ghosty')
      {
        anim: s('idle')
        animSpeed: 0.5
      }
    )
    with anchor() 'center' |> s()
    pos(center())
  ]
}

// ---

fn createMenuStructure {
  INFOTEXTCHOICES := {
    'story mode': 'Story Mode - Play the storyline!'
    'freeplay': 'Freeplay - Play any song!'
    'options': 'Options - Change your settings!'
    'quit': 'Quit - Exit the game!'
  }

  top := {}

  top.bar <- with add() [
    rect(width(), 40)
    pos(0, 0)
    color(0, 0, 0)
    z(- 2)
  ]

  top.topLeftText <- with add() [
    s('Top Left') |> text({
      size: 18
      font: s('sink')
    })
    pos(5, 5)
    with anchor() s('topleft')
    z(-2)
  ]

  top.topRightText <- with add() [
    s('Top Right') |> text({
      size: 18
      font: s('sink')
    })
    pos(width() - 5, 5)
    with anchor() s('topright')
    z(-2)
  ]

  // ---

  bottom := {}

  bottom.bar <- with add() [
    rect(width(), 200)
    pos(0, height())
    color(0, 0, 0)
    z(-2)
    with anchor() s('botleft')
  ]

  bottom.infoText <- with add() [
    s('Loading...') |> text({
      size: 18
      font: s('sink')
    })
    pos(5, height() - 5)
    with anchor() s('botleft')
    z(-2)
  ]

  // ---

  {{
    top: top
    bottom: bottom
  }}
}

// ---

fn ScrollableMenu(options, colors, w, di) {

  colors := colors |> std.default([])
  COL1 := colors.0 |> std.default(WHITE)
  COL2 := colors.1 |> std.default(YELLOW)

  WIDTH := w |> std.default(300)
  DIST := di |> std.default(30)

  count := options |> len()
  ii := 0

  scrollBar := with add() [
    pos(
      center().x - (DIST + WIDTH)
      center().y + 65
    )
  ]

  scrollBar.TW := ?

  optionKeys := keys(options)
  with std.each(options) fn(ii, ic) {
    with scrollBar.add() [
      text(optionKeys.(ic), {
        align: s('center')
        size: 36
        color: WHITE
        width: WIDTH
        font: s('gwibble')
      })

      pos(DIST + (WIDTH * ic) + (WIDTH / 2), 0)
    ]
  }

  // @ Text stuff
  (scrollBar.children.0).color <- YELLOW

  {{
    count: fn() count
    ii: fn() ii
    key: OKey := fn() optionKeys.(ii)
    
    getItem: fn() options.(OKey())

    EListen: fn(cb) s('enter') |> onKeyPress(cb)
  
    moveBack: fn moveBack(cb) if ii < count - 1 -> {
      ii <- ii + 1
    
      if scrollBar.TW != ? -> scrollBar.TW.finish()

      scrollBar.TW <- tween(
        scrollBar.pos.x
        scrollBar.pos.x - WIDTH
        0.2
        fn(v) scrollBar.pos.x <- v
        easings.easeOutQuad
      )

      textgo := scrollBar.children.(ii)

      with std.each(scrollBar.children) fn(scrollChild, ic) {
        if ic != ii -> scrollChild.color <- WHITE
      }
      
      textgo.color <- YELLOW

      with scrollBar.TW.onEnd() fn {
        scrollBar.TW <- ?
      }

      cb()
    }

    moveForward: fn moveForward(cb) if ii > 0 -> {
      ii <- ii - 1
    
      if scrollBar.TW != ? -> scrollBar.TW.finish()

      scrollBar.TW <- tween(
        scrollBar.pos.x
        scrollBar.pos.x + WIDTH
        0.2
        fn(v) scrollBar.pos.x <- v
        easings.easeOutQuad
      )

      textgo := scrollBar.children.(ii)

      with std.each(scrollBar.children) fn(scrollChild, ic) {
        if ic != ii -> scrollChild.color <- WHITE
      }
      
      textgo.color <- YELLOW

      with scrollBar.TW.onEnd() fn {
        scrollBar.TW <- ?
      }

      cb()
    }
  }}
}

fn ScrollableList(options, colors, y, di) {
  colors := colors |> std.default([])
  COL1 := colors.0 |> std.default(WHITE)
  COL2 := colors.1 |> std.default(YELLOW)

  HEIGHT := y |> std.default(300)
  DIST := di |> std.default(30)

  count := options |> len()
  ii := 0

  scrollBar := with add() [
    pos(
      20
      center().y - (DIST + HEIGHT)
    )
  ]

  scrollBar.TW := ?

  optionKeys := keys(options)
  with std.each(options) fn(ii, ic) {
    with scrollBar.add() [
      text(optionKeys.(ic), {
        size: 36
        color: WHITE
        width: 500
        font: s('gwibble')
      })

      pos(0, DIST + (DIST * ic) + (HEIGHT))
    ]
  }

  // @ Text stuff
  (scrollBar.children.0).color <- YELLOW

  {{
    count: fn() count
    ii: fn() ii
    key: OKey := fn() optionKeys.(ii)

    getItem: fn() options.(OKey())

    EListen: fn(cb) s('enter') |> onKeyPress(cb)

    moveBack: fn moveBack(cb) if ii < count - 1 -> {
      ii <- ii + 1

      if scrollBar.TW != ? -> scrollBar.TW.finish()

      scrollBar.TW <- tween(
        scrollBar.pos.y
        scrollBar.pos.y - DIST
        0.2
        fn(v) scrollBar.pos.y <- v
        easings.easeOutQuad
      )

      textgo := scrollBar.children.(ii)

      with std.each(scrollBar.children) fn(scrollChild, ic) {
        if ic != ii -> scrollChild.color <- WHITE
      }

      textgo.color <- YELLOW

      with scrollBar.TW.onEnd() fn {
        scrollBar.TW <- ?
      }

      cb()
    }

    moveForward: fn moveForward(cb) if ii > 0 -> {
      ii <- ii - 1

      if scrollBar.TW != ? -> scrollBar.TW.finish()

      scrollBar.TW <- tween(
        scrollBar.pos.y
        scrollBar.pos.y + DIST
        0.2
        fn(v) scrollBar.pos.y <- v
        easings.easeOutQuad
      )

      textgo := scrollBar.children.(ii)

      with std.each(scrollBar.children) fn(scrollChild, ic) {
        if ic != ii -> scrollChild.color <- WHITE
      }

      textgo.color <- YELLOW

      with scrollBar.TW.onEnd() fn {
        scrollBar.TW <- ?
      }

      cb()
    }
  }}
}

// ---

fn createBeatHandler {
  lastBeatTime := 0

  {{
    activateBeat: fn(bpm) {
      beatInterval := 60000 / bpm
      currentTime := time()

      if currentTime - lastBeatTime > beatInterval / 1000 {
        true -> {
          lastBeatTime <- currentTime
          true
        }
        
        false -> false
      }
    }
  }}
}

// ---

FLAGS? := {
  init?: false
}

// ---

with scene('initLoading') fn {

  setBackground(BLACK)

  FONT_SIZE := 24

  loader_text := with add() [
    text(
      ''
      {
        font: 'gwibble' |> s()
        size: FONT_SIZE
      }
    )
    pos()
    with anchor() 'topleft' |> s()
  ]

  fn AddText(text) {
    loader_text.text <- loader_text.text + text |> s() << '\n'
  }

  // ---

  AddText('Welcome to OKFunk!!!')
  AddText('')
  
  fn log(ii) AddText('[okbf] ' << ii)
  fn attemptLog(ii) with log() 'Attempting to load: ' << ii
  fn sucLog(ii) with log() 'Got: ' << ii

  // ---

  // @ Asset Loading
  attemptLog('gwibble')
  
  gwibble := loadFont(
    'gwibble' |> s()
    '/fonts/gwibble/font.ttf' |> s()
  )

  with AddText() gwibble |> keys()
  AddText('')
  
  sucLog('gwibble')

  attemptLog('bean')
  beanSpr <- with do() '
    loadSpriteAtlas("sprites/game/characters/beanfriend.png", {
      bean: {
        x: 0,
        y: 0,
        width: 96 * 5,
        height: 76 * 5,
        sliceX: 5,
        sliceY: 5,
        anims: {
          none: { from: 0, to: 0, loop: true, },
          idle: { from: 0, to: 4, loop: true },
          left: { from: 5, to: 8, loop: false },
          down: { from: 9, to: 12, loop: false },
          up: { from: 13, to: 16, loop: false },
          right: { from: 17, to: 20, loop: false },
        },
      }
    })
  '
  
  with AddText() beanSpr |> keys()
  AddText('')
  
  sucLog('bean')

  attemptLog('ghosty')
  ghostySpr <- with do() '
    loadSpriteAtlas("sprites/game/characters/Ghosty.png", {
      ghosty: {
        x: 0,
        y: 0,
        width: 72 * 2,
        height: 80 * 2,
        sliceX: 2,
        anims: {
          none: { from: 0, to: 0, loop: true, },
          idle: { from: 0, to: 1, loop: true },
        }
      }
    })
  '

  with AddText() ghostySpr |> keys()
  AddText('')
  
  sucLog('ghosty')

  fn lspr(name, path) {
    id := 'sprite:' << name
    
    attemptLog(id)
    
    returns := OKloadSprite(name, path)
    
    with AddText() returns |> keys()
    AddText('')
    sucLog(id)

    returns
  }
  
  fn lsnd(name, path) {
    id := 'sound:' << name
    
    attemptLog(id)
    
    returns := loadSound(
      s(name)
      s(path)
    )
    
    with AddText() returns |> keys()
    AddText('')
    sucLog(id)

    returns
  }
  
  menu_logoSpr <- lspr('menu_logo', 'sprites/menu/menu.png')
  loadBarSpr <- lspr('loadBar', 'sprites/loadBar.png')
  loading_tempSpr <- lspr('loading_temp', 'sprites/menu/kblfront.png')

  kaboomSpr <- lspr('kaboom', 'sprites/ka.png')

  kaboom_bgSpr := lspr(
    'kaboom_bg'
    'sprites/boom.png'
  )

  cowingSpr <- lspr('cowing', '/cowingWhite.png')

  lsnd('freakyMenu', 'sounds/freakyMenu.ogg')
  
  lsnd('confirmMenu', 'sounds/confirmMenu.ogg')
  lsnd('cancelMenu', 'sounds/cancelMenu.ogg')
  lsnd('scrollMenu', 'sounds/scrollMenu.ogg')

  // Modders !
  window.intialLoad <- {
    gwibble: gwibble
    beanSpr: beanSpr
    ghostySpr: ghostySpr
    menu_logoSpr: menu_logoSpr
    loadBarSpr: loadBarSpr
    loading_tempSpr: loading_tempSpr
    kaboomSpr: kaboomSpr
    kaboom_bgSpr: kaboom_bgSpr
  }

  with load() Promise.all([
    fetch('code/txt.txt').
      then(fn(res) res.text()).
      then(fn(res) introTexts <- string(res))
  ])

  // ---

  // @ First Input check
  go('inputCheck', {
    next: fn() go('intro')
  })

}

// ---

with scene('inputCheck') fn(data) {
  if data.next != ? -> {

    if FirstInput? {
      false -> getFInput(data.next)
      true -> data.next()
    }
    
  }

  // ---

  txt := with do() '
    add([
      text(
        "Please press anywhere on the canvas.",
        {
          size: 18,
          width: width() * 0.75,
          font: "sink",
          align: "center"
        }
      ),
      pos(center()),
      anchor("center")
    ])
  '
}

// ---

with scene('intro') fn {

  playMenuMusic()

  setBackground(BLACK)

  firstTrack := newCut()
  
  // ---

  enterNextH('menuScreen')
  enterNextH('intro', 'escape')

  // ---
  
  txt := with do() '
    add([
      text(
        "KaboomFunkin\\\'",
        {
          size: 42,
          width: width() * 0.75,
          font: "gwibble",
          align: "center"
        }
      ),
      pos(center()),
      anchor("center")
    ])
  '

  cowingLogo := with add() [
    with sprite() 'cowing' |> s()
    pos(center())
    with anchor() 'center' |> s()
    scale(0.1)
  ]

  // @semi-components
  with shakey() txt
  with shakey() cowingLogo

  // ---

  cutArr := [

    // Initally Hidden
    [0, [txt, 0]]
    [0, [cowingLogo, 0]]
    
    [2, [txt, 1]]
    [3.2, [txt, 0]]

    [2, fn {
      txt.text <- 'Made by Spectcow\n'
    }]
    [0, [txt, 1]]
    
    [3, fn {
      txt.text <- txt.text + 'He\'s so cool !'
    }]
    
    [3.2, [txt, 0]]

    // @ Intro Random Text
    [2, fn {
      choice := introTexts |> str.split('\n') |> rng.choice()
      txt.text <- ''

      choice |> str.split('--') |> with std.each() fn(ii, ic) {
        with wait(1.2 * ic) fn() txt.text <- txt.text + ii << '\n'
      }
    }]
    [0, [txt, 1]]
    
    [4, [txt, 0]]

    [2, fn() Transition(WHITE).fadeIn(2)]
    // 2 + fadeTime
    [3 + 2, fn() go('menuScreen')]
  ]

  with firstTrack.Cutscene(cutArr) fn(ii) if type(ii) {
    :function -> ii()
    _ -> {
      (ii.0).opacity <- ii.1 |> std.default((ii.0).opacity)
    }
  }
}

// ---

with scene('menuScreen') fn {

  enterNextH('gameSelect')
  enterNextH('intro', 'escape')

  // ---

  MEnterTrigger()
  
  // ---

  bpmh := createBeatHandler()

  menu_logo := with add() [
    with sprite() s('menu_logo')
    pos(center())
    with anchor() s('center')
    scale(0.5)
  ]

  kaboomBG := with add() [
    with sprite() s('kaboom_bg')
    pos(menu_logo.pos.x + 125, menu_logo.pos.y + 75)
    with anchor() s('center')
    scale(0.5)
  ]

  kaboomText := with add() [
    with sprite() s('kaboom')
    pos(kaboomBG.pos)
    with anchor() s('center')
    scale(0.5)
  ]

  text_ := with add() [
    text('Press Enter to Start!' |> s(), {
      size: 28
      font: gwibble
      align: 'center' |> s()
    })
    
    pos(menu_logo.pos.x, menu_logo.pos.y + 200)
    with anchor() s('center')
  ]

  // ---

  scl := 0.5
  udc := with onUpdate() fn {
  
    if bpmh.activateBeat(100) { 
      true -> {
        menu_logo.use(
          scale(scl <- 0.4)
        )
      }
      
      false -> {
        scl <- scl + 0.001
        menu_logo.use(
          scale(scl)
        )
      }
    }
    
  }
  
}

// ---

with scene('gameSelect') fn {

  enterNextH('menuScreen', 'escape')

  // ---

  tabs := createMenuStructure()

  fn setText(topl, topr, infot) {
    fn is(rule, cb) if rule != ? -> cb()
    
    with is(topl) fn() tabs.top.topLeftText.text <- topl
    with is(topr) fn() tabs.top.topRightText.text <- topr
    with is(infot) fn() tabs.bottom.infoText.text <- infot
  }

  // Yellowish BG
  with add() [
    rect(width(), height())
    color(
      SUPERCOMMONCOLOUR.0
      SUPERCOMMONCOLOUR.1
      SUPERCOMMONCOLOUR.2
    )
    z(-3)
  ]
  
  setText(
    'Select Tab'
    'USE ARROW KEYS TO MOVE TABS'
    '(Press ENTER to select tab)'
  )

  // ---

  bf := createPlayer()
  gf := createGhosty()

  with bf.use() pos(100, center().y - 75)
  with gf.use() pos(center().x, center().y - 75)

  // ---

  weeks := {
    'Story Mode': fn() go('storyMode')
    'Freeplay': fn() go('freeplay')
    'Options': fn() go('options')
    'Credits': fn() go('credits')
    'Quit': fn() console.log('quit')
  }

  weekKeys := keys(weeks)

  sm := ScrollableMenu(weeks)

  // ---

  fn changeTexts if sm.key() {
    weekKeys.0 -> setText(
      ?
      'Play as Bean!'
      'A unique storyline, Kaboom themed'
    )

    weekKeys.1 -> setText(
      ?
      'Play any SONG!'
      'Your old friend, Freeplay.'
    )

    weekKeys.2 -> setText(
      ?
      'Play with your settings'
      'Change how your game works'
    )

    weekKeys.3 -> setText(
      ?
      'See who did what'
      'The credits, thank the ones in it!'
    )

    weekKeys.4 -> setText(
      ?
      'Quit'
      'Quit the game, boooring.'
    )
  }

  fn moveLeft {
    with sm.moveForward() fn() playTickSound()
    changeTexts()
  }

  fn moveRight {
    with sm.moveBack() fn() playTickSound()
    changeTexts()
  }

  // ---

  s('left') |> with onKeyPressRepeat() moveLeft
  s('a') |> with onKeyPressRepeat() moveLeft
  
  s('right') |> with onKeyPressRepeat() moveRight
  s('d') |> with onKeyPressRepeat() moveRight

  // ---

  with sm.EListen() with std.once() fn {
    weekCall := sm.getItem()

    Transition(BLACK).fadeIn(0.2)
    with wait(0.2) weekCall
  }
  
}

// ---

with scene('storyMode') fn {

  enterNextH('gameSelect', 'escape')

  // ---

  tabs := createMenuStructure()

  fn setText(topl, topr, infot) {
    fn is(rule, cb) if rule != ? -> cb()

    with is(topl) fn() tabs.top.topLeftText.text <- topl
    with is(topr) fn() tabs.top.topRightText.text <- topr
    with is(infot) fn() tabs.bottom.infoText.text <- infot
  }

  // Yellowish BG
  with add() [
    rect(width(), height())
    color(
      SUPERCOMMONCOLOUR.0
      SUPERCOMMONCOLOUR.1
      SUPERCOMMONCOLOUR.2
    )
    z(-3)
  ]

  setText(
    'Select Week'
    'USE ARROW KEYS TO MOVE TABS'
    '(Press ENTER to select Week)'
  )

  trs := Transition(BLACK)
  trs.fadeOut(0.2)

  // ---

  weeks := {
    'Week 1': fn() console.log('week')
    'Week 2': fn() console.log('week')
    'Week 3': fn() console.log('week')
    'Week 4': fn() console.log('week')
    'Week 5': fn() console.log('week')
    'Week 6': fn() console.log('week')
    'Week 7': fn() console.log('week')
  }

  weekKeys := keys(weeks)

  sm := ScrollableMenu(weeks)

  // ---

  fn changeTexts if sm.key() {
    weekKeys.0 -> setText(
      ?
      'Daddy Dearest'
      'A unique storyline, Kaboom themed'
    )

    weekKeys.1 -> setText(
      ?
      'The Spookies'
      'Your old friend, Freeplay.'
    )

    weekKeys.2 -> setText(
      ?
      'Pico'
      'Change how your game works'
    )

    weekKeys.3 -> setText(
      ?
      'Mommy Mearest'
      'The credits, thank the ones in it!'
    )

    weekKeys.4 -> setText(
      ?
      'Christmas'
      'Quit the game, boooring.'
    )
    
    weekKeys.5 -> setText(
      ?
      'Senpai'
      'Quit the game, boooring.'
    )
    
    weekKeys.6 -> setText(
      ?
      'Tankman'
      'Quit the game, boooring.'
    )
  }

  fn moveLeft {
    with sm.moveForward() fn() playTickSound()
    changeTexts()
  }

  fn moveRight {
    with sm.moveBack() fn() playTickSound()
    changeTexts()
  }

  // ---

  s('left') |> with onKeyPressRepeat() moveLeft
  s('a') |> with onKeyPressRepeat() moveLeft

  s('right') |> with onKeyPressRepeat() moveRight
  s('d') |> with onKeyPressRepeat() moveRight

  // ---

  with sm.EListen() with std.once() fn {
    weekCall := sm.getItem()

    Transition(BLACK).fadeIn(0.2)
    with wait(0.2) weekCall
  }
}

with scene('freeplay') fn {

  enterNextH('gameSelect', 'escape')
  
  // ---

  songs := {
    'Song': fn() go('storyMode')
    'Song2': fn() go('freeplay')
    'Song3': fn() go('options')
  }

  // ---

  songKeys := keys(songs)

  sl := ScrollableList(songs, ?, ?, 50)

  fn moveUp {
    with sl.moveForward() fn() playTickSound()
  }

  fn moveDown {
    with sl.moveBack() fn() playTickSound()
  }

  // ---

  s('up') |> with onKeyPressRepeat() moveUp
  s('w') |> with onKeyPressRepeat() moveUp

  s('down') |> with onKeyPressRepeat() moveDown
  s('s') |> with onKeyPressRepeat() moveDown

  // ---

  with sl.EListen() with std.once() fn {
    songCall := sl.getItem()
    songCall()
  }
}

// ---

with scene('options') fn {

  enterNextH('gameSelect', 'escape')

  // ---

  songs := {
    'Graphics': fn() go('op_graphics')
    'Audio': fn() go('op_audio')
    'Keybinds': fn() go('op_kb')
    'Adv. Opts': fn() go('op_adv')
    'Leave': fn() go('gameSelect')
  }

  // ---

  songKeys := keys(songs)

  sl := ScrollableList(songs, ?, ?, 50)

  fn moveUp {
    with sl.moveForward() fn() playTickSound()
  }

  fn moveDown {
    with sl.moveBack() fn() playTickSound()
  }

  // ---

  s('up') |> with onKeyPressRepeat() moveUp
  s('w') |> with onKeyPressRepeat() moveUp

  s('down') |> with onKeyPressRepeat() moveDown
  s('s') |> with onKeyPressRepeat() moveDown

  // ---

  with sl.EListen() with std.once() fn {
    songCall := sl.getItem()
    songCall()
  }
}

with scene('op_graphics') fn {

  enterNextH('options', 'escape')

  // ---

  options := {
    'Gamma': fn() go('op_graphics')
    'Zoom': fn() go('op_kb')
    'No Shaders': fn() go('op_audio')
    'Leave': fn() go('options')
  }

  // ---

  optionKeys := keys(options)

  sl := ScrollableList(options, ?, ?, 50)

  fn moveUp {
    with sl.moveForward() fn() playTickSound()
  }

  fn moveDown {
    with sl.moveBack() fn() playTickSound()
  }

  // ---

  s('up') |> with onKeyPressRepeat() moveUp
  s('w') |> with onKeyPressRepeat() moveUp

  s('down') |> with onKeyPressRepeat() moveDown
  s('s') |> with onKeyPressRepeat() moveDown

  // ---

  with sl.EListen() with std.once() fn {
    optionCall := sl.getItem()
    optionCall()
  }
}

with scene('op_audio') fn {

  enterNextH('options', 'escape')

  // ---

  options := {
    'All': fn() go('op_audio')
    'Music': fn() go('op_graphics')
    'Vocals': fn() go('op_kb')
    'Sounds': fn() go('op_adv')
    'Leave': fn() go('options')
  }

  // ---

  optionKeys := keys(options)

  sl := ScrollableList(options, ?, ?, 50)

  fn moveUp {
    with sl.moveForward() fn() playTickSound()
  }

  fn moveDown {
    with sl.moveBack() fn() playTickSound()
  }

  // ---

  s('up') |> with onKeyPressRepeat() moveUp
  s('w') |> with onKeyPressRepeat() moveUp

  s('down') |> with onKeyPressRepeat() moveDown
  s('s') |> with onKeyPressRepeat() moveDown

  // ---

  with sl.EListen() with std.once() fn {
    optionCall := sl.getItem()
    optionCall()
  }
}

with scene('op_kb') fn {

  enterNextH('options', 'escape')

  // ---

  options := {
    'Game': fn() go('op_graphics')
    'Menu': fn() go('op_audio')
    'Mods': fn() go('op_kb')
    'Leave': fn() go('options')
  }

  // ---

  optionKeys := keys(options)

  sl := ScrollableList(options, ?, ?, 50)

  fn moveUp {
    with sl.moveForward() fn() playTickSound()
  }

  fn moveDown {
    with sl.moveBack() fn() playTickSound()
  }

  // ---

  s('up') |> with onKeyPressRepeat() moveUp
  s('w') |> with onKeyPressRepeat() moveUp

  s('down') |> with onKeyPressRepeat() moveDown
  s('s') |> with onKeyPressRepeat() moveDown

  // ---

  with sl.EListen() with std.once() fn {
    optionCall := sl.getItem()
    optionCall()
  }
}

with scene('op_adv') fn {

  enterNextH('options', 'escape')

  // ---

  options := {
    'Leave': fn() go('options')
  }

  // ---

  optionKeys := keys(options)

  sl := ScrollableList(options, ?, ?, 50)

  fn moveUp {
    with sl.moveForward() fn() playTickSound()
  }

  fn moveDown {
    with sl.moveBack() fn() playTickSound()
  }

  // ---

  s('up') |> with onKeyPressRepeat() moveUp
  s('w') |> with onKeyPressRepeat() moveUp

  s('down') |> with onKeyPressRepeat() moveDown
  s('s') |> with onKeyPressRepeat() moveDown

  // ---

  with sl.EListen() with std.once() fn {
    optionCall := sl.getItem()
    optionCall()
  }
}

with scene('credits') fn {

  enterNextH('gameSelect', 'escape')

  // ---

  creditStr := 
    'SpectCOW (SpcFORK), Creator of KaboomFunkin.\n' <<
    'Thanks for playing!'

  with add() [
    text(creditStr, {
      size: 12 * 1.5
      align: s('center')
    })

    with pos() center()
    with anchor() s('center')
  ]

}

// ---

with scene('game') fn {
  if ! FLAGS?.init? {
    true -> {
      FLAGS?.init? <- true
  
      go('initLoading')
    }

    false -> go('intro')
  }
}