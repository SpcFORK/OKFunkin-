// @SPCFORK BOOT

std := import('std')
Once := std.once

str := import('str')
json := import('json')
rng := import('random')

_b := import('boot')

// ---

// KSink

ksink := loadFont(
  s('sink')
  s('/fonts/sink/font.ttf')
)

GLOBAL_LOADED_FILES := window.GLOBAL_LOADED_FILES := {
  txts: ''
  RIGHTTOPTEXTCHOICES: {}
  WEEKLIST: {}
  WEEKSONGS: {}
  STORYW: {}
}

// ---

// W GLOBALS
// Check if we can play Sounds
{
  FirstInput?: FirstInput?
  IS_IFRAME: IS_IFRAME
  CHROMEOS: CHROMEOS
  
  SUPERCOMMONCOLOUR: SUPERCOMMONCOLOUR
  createBeatHandler: createBeatHandler

  getFInput: getFInput
  enterNextH: enterNextH

  playMenuEnter: playMenuEnter
  MEnterTrigger: MEnterTrigger

  currentAudio: currentAudio
  
  playMenuEnter: playMenuEnter
  stopConfirm: stopConfirm
  MEnterTrigger: MEnterTrigger
  
  playMenuMusic: playMenuMusic
  stopMenuMusic: stopMenuMusic

  playTickSound: playTickSound
  stopTickSound: stopTickSound

  createPlayer: createPlayer
  createGhosty: createGhosty

  createMenuStructure: createMenuStructure
  ScrollableMenu: ScrollableMenu
  ScrollableList: ScrollableList
} := import('core')

// ---

{
  Transition: Transition
  PixelTransition: PixelTransition
} := import('../blocks/Transition')

{ newCut: newCut } := import('../ware/cutscene')
{ shakey: shakey } := import('../blocks/shakey')

// ---

// @Preload

PRELOAD := import('menu/preload')
loadingScreen := import('loadingScreen')
actualGame := import('actualGame')

{
  gwibble: gwibble
  beanSpr: beanSpr
  ghostySpr: ghostySpr
  menu_logoSpr: menu_logoSpr
  loadBarSpr: loadBarSpr
  loading_tempSpr: loading_tempSpr
  kaboomSpr: kaboomSpr
  kaboom_bgSpr: kaboom_bgSpr
  cowingSpr: cowingSpr
  introTexts: introTexts

  menuMusic: menuMusic
} := PRELOAD

// ---

menuAll := import('menu/all')

// ---

with scene('gameSelect') fn {

  enterNextH('menuScreen', 'escape')

  // ---

  tabs := createMenuStructure()

  fn setText(topl, topr, infot) {
    fn is(rule, cb) if rule != ? -> cb()

    with is(topl) fn() tabs.top.topLeftText.text <- topl
    with is(topr) fn() tabs.top.topRightText.text <- topr
    with is(infot) fn() tabs.bottom.infoText.text <- infot
  }

  // Yellowish BG
  with add() [
    rect(width(), height())
    color(
      SUPERCOMMONCOLOUR.0
      SUPERCOMMONCOLOUR.1
      SUPERCOMMONCOLOUR.2
    )
    z(-3)
  ]

  setText(
    'Select Tab'
    'USE ARROW KEYS TO MOVE TABS'
    '(Press ENTER to select tab)'
  )

  // ---

  bf := createPlayer()
  gf := createGhosty()

  with bf.use() pos(100, center().y - 75)
  with gf.use() pos(center().x, center().y - 75)

  // ---

  weeks := {
    'Story Mode': fn() go('storyMode')
    'Freeplay': fn() go('freeplay')
    'Options': fn() go('options')
    'Credits': fn() go('credits')
    'Quit': fn() console.log('quit')
  }

  weekKeys := keys(weeks)

  sm := ScrollableMenu(weeks)

  // ---

  fn changeTexts if sm.key() {
    weekKeys.0 -> setText(
      ?
      'Play as Bean!'
      'A unique storyline, Kaboom themed'
    )

    weekKeys.1 -> setText(
      ?
      'Play any SONG!'
      'Your old friend, Freeplay.'
    )

    weekKeys.2 -> setText(
      ?
      'Play with your settings'
      'Change how your game works'
    )

    weekKeys.3 -> setText(
      ?
      'See who did what'
      'The credits, thank the ones in it!'
    )

    weekKeys.4 -> setText(
      ?
      'Quit'
      'Quit the game, boooring.'
    )
  }

  fn moveLeft {
    with sm.moveForward() fn() playTickSound()
    changeTexts()
  }

  fn moveRight {
    with sm.moveBack() fn() playTickSound()
    changeTexts()
  }

  // ---

  s('left') |> with onKeyPressRepeat() moveLeft
  s('a') |> with onKeyPressRepeat() moveLeft

  s('right') |> with onKeyPressRepeat() moveRight
  s('d') |> with onKeyPressRepeat() moveRight

  // ---

  with sm.EListen() with std.once() fn {
    weekCall := sm.getItem()

    Transition(BLACK).fadeIn(0.2)
    with wait(0.2) weekCall
  }

}

// ---
// @Storymode
//   Expect to come here a lot.

StoryWeeks := {
  'Week 1': fn() console.log('week')
  'Week 2': fn() console.log('week')
  'Week 3': fn() console.log('week')
  'Week 4': fn() console.log('week')
  'Week 5': fn() console.log('week')
  'Week 6': fn() console.log('week')
  'Week 7': fn() console.log('week')
}

with scene('storyMode') fn {

  enterNextH('gameSelect', 'escape')

  // ---

  tabs := createMenuStructure()

  fn setText(topl, topr, infot) {
    fn is(rule, cb) if rule != ? -> cb()

    with is(topl) fn() tabs.top.topLeftText.text <- topl
    with is(topr) fn() tabs.top.topRightText.text <- topr
    with is(infot) fn() tabs.bottom.infoText.text <- infot
  }

  // Yellowish BG
  with add() [
    rect(width(), height())
    color(
      SUPERCOMMONCOLOUR.0
      SUPERCOMMONCOLOUR.1
      SUPERCOMMONCOLOUR.2
    )
    z(-3)
  ]

  setText(
    'Select Week'
    'USE ARROW KEYS TO MOVE TABS'
    '(Press ENTER to select Week)'
  )

  trs := Transition(BLACK)
  trs.fadeOut(0.2)

  // ---

  WeekNames := []
  // 8 Being 7 weeks then next stop
  with std.loop(8) fn(ii) {
    WeekNames << ('Week ' + s(ii))
  }

  fn Week1Load {
    // Do Cutscene
    // We also do loading during them because thats cool downtime!

    cutsc := newCut()
    [
      // In
      [0.05, fn() console.log(1)]
      [0.05, fn() console.log(2)]
      [0.05, fn() console.log(3)]
      [0.05, leave!]
    ] |> with cutsc.Cutscene() fn() {}
    
    // Then leave
    fn leave!() go('loading', {
      cb: fn {
        Promise |> with new() fn(r) r()
      }
    })
  }

  Weeks := {
    WeekNames.1: Week1Load
  }

  WeekTexts := {
    WeekNames.1: [
      'Daddy Dearest'
      'A unique storyline, Kaboom themed'
    ]

    WeekNames.2: [
      'The Spookies'
      'Your old friend, Freeplay.'
    ]

    WeekNames.3: [
      'Pico'
      'Change how your game works'
    ]

    WeekNames.4: [
      'Mommy Mearest'
      'The credits, thank the ones in it!'
    ]

    WeekNames.5: [
      'Mommy Mearest'
      'The credits, thank the ones in it!'
    ]

    WeekNames.6: [
      'Christmas'
      'Quit the game, boooring.'
    ]

    WeekNames.7: [
      'Senpai'
      'Quit the game, boooring.'
    ]

    WeekNames.8: [
      'Tankman'
      'Quit the game, boooring.'
    ]
  }

  sm := ScrollableMenu(Weeks)

  // ---

  fn changeTexts {
    weekbarText := WeekTexts.(sm.key()) |> std.default([?,?,?])
    setText(?, weekbarText...)
  }

  fn moveLeft {
    with sm.moveForward() fn() playTickSound()
    changeTexts()
  }

  fn moveRight {
    with sm.moveBack() fn() playTickSound()
    changeTexts()
  }

  // ---

  s('left') |> with onKeyPressRepeat() moveLeft
  s('a') |> with onKeyPressRepeat() moveLeft

  s('right') |> with onKeyPressRepeat() moveRight
  s('d') |> with onKeyPressRepeat() moveRight

  // ---

  with sm.EListen() with std.once() fn {
    weekCall := sm.getItem()

    Transition(BLACK).fadeIn(0.2)
    with wait(0.2) weekCall
  }
}

with scene('freeplay') fn {

  enterNextH('gameSelect', 'escape')

  // ---

  songs := {
    'Song': fn() go('storyMode')
    'Song2': fn() go('freeplay')
    'Song3': fn() go('options')
  }

  // ---

  songKeys := keys(songs)

  sl := ScrollableList(songs, ?, ?, 50)

  fn moveUp {
    with sl.moveForward() fn() playTickSound()
  }

  fn moveDown {
    with sl.moveBack() fn() playTickSound()
  }

  // ---

  s('up') |> with onKeyPressRepeat() moveUp
  s('w') |> with onKeyPressRepeat() moveUp

  s('down') |> with onKeyPressRepeat() moveDown
  s('s') |> with onKeyPressRepeat() moveDown

  // ---

  with sl.EListen() with std.once() fn {
    songCall := sl.getItem()
    songCall()
  }
}

// ---

FLAGS? := {
  init?: false
}

with scene('game') fn {
  if ! FLAGS?.init? {
    true -> {
      FLAGS?.init? <- true
  
      go('initLoading')
    }

    false -> go('intro')
  }
}